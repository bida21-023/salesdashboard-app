# -*- coding: utf-8 -*-
"""WEB LOGS-FINAL SMALLER SIZE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Y4E3mGBYjWsViuAburg30CxKNnWrjy3

Import the necessary libraries
"""

import pandas as pd
import random
import os
from datetime import datetime, timedelta

"""Define constants and helper functions"""

# Starting and ending dates for the data generation
START_DATE = datetime(2020, 1, 1)
END_DATE = datetime(2025, 12, 31)

# Helper function to generate a random timestamp
def random_timestamp():
    total_minutes = int((END_DATE - START_DATE).total_seconds() // 60)
    minutes_since_start = random.randint(0, total_minutes)
    random_date = START_DATE + timedelta(minutes=minutes_since_start)
    return random_date.strftime("%Y-%m-%d %H:%M:%S")

"""Define the data for columns"""

import os
import random
from datetime import datetime, timedelta
import pandas as pd

CSV_PATH = "sales_data.csv"
TOTAL_ENTRIES = 100_000

# Constants
PRODUCT_CATEGORY_MAP = {
    "AI Assistant": "Software",
    "Cloud Storage": "Cloud Services",
    "Analytics Tool": "Analytics",
    "Virtual Prototyping": "Prototyping",
    "Subscription Package": "Subscription"
}
PRODUCT_ID_MAP = {
    "AI Assistant": "P001",
    "Cloud Storage": "P002",
    "Analytics Tool": "P003",
    "Virtual Prototyping": "P004",
    "Subscription Package": "P005"
}
PRODUCTS = list(PRODUCT_CATEGORY_MAP.keys())
PAYMENTS = ["Credit Card", "PayPal", "Bank Transfer", "Crypto"]
CUSTOMER_TYPES = ["Personal", "Business"]
OCCUPATIONS = ["Software Developer", "Product Manager", "Designer", "Marketer", "Engineer"]
STATUSES = [200, 404, 500]
EVENT_TYPES = ["Visit", "Purchase", "Inquiry", "Demo Request"]
PRICES = [29.99, 49.99, 99.99, 199.99]
SALES_CHANNELS = ["Online", "In-Person", "AI-Driven"]

# Define 10 salespeople, including one AI assistant
SALESPEOPLE = {
    "SP001": "John Smith",
    "SP002": "Emma Johnson",
    "SP003": "Michael Chen",
    "SP004": "Sarah Davis",
    "SP005": "David Wilson",
    "SP006": "Laura Brown",
    "SP007": "James Taylor",
    "SP008": "Olivia Martinez",
    "SP009": "William Lee",
    "SP010": "AI Assistant"
}

CONTINENT_IPS = {
    "North America": ["128.1.0.0", "155.55.0.24", "157.20.5.0"],
    "South America": ["157.20.10.0", "157.20.15.0"],
    "Europe": ["157.20.20.10", "157.20.25.0", "157.20.30.0", "157.20.35.0", "157.20.40.0"],
    "Asia": ["157.20.45.0", "157.20.50.0", "157.20.55.0", "157.20.60.0", "157.20.65.0"],
    "Africa": ["157.20.70.0", "157.20.75.0", "157.20.80.0", "157.20.85.0", "157.20.90.0"],
    "Oceania": ["157.20.95.0", "157.20.100.0", "157.20.105.0", "157.20.110.0", "157.20.115.0"]
}

COUNTRIES = {
    "128.1.0.0": "USA", "155.55.0.24": "Canada", "157.20.5.0": "Mexico",
    "157.20.10.0": "Brazil", "157.20.15.0": "Argentina",
    "157.20.20.10": "Germany", "157.20.25.0": "France", "157.20.30.0": "UK", "157.20.35.0": "Italy", "157.20.40.0": "Spain",
    "157.20.45.0": "China", "157.20.50.0": "India", "157.20.55.0": "Japan", "157.20.60.0": "South Korea", "157.20.65.0": "Singapore",
    "157.20.70.0": "South Africa", "157.20.75.0": "Nigeria", "157.20.80.0": "Egypt", "157.20.85.0": "Kenya", "157.20.90.0": "Morocco",
    "157.20.95.0": "Australia", "157.20.100.0": "New Zealand", "157.20.105.0": "Fiji", "157.20.110.0": "Papua New Guinea", "157.20.115.0": "Solomon Islands"
}

def random_timestamp(start_year=2020, end_year=2025):
    start = datetime(start_year, 1, 1)
    end = datetime(end_year, 12, 31)
    delta = end - start
    return start + timedelta(days=random.randint(0, delta.days), seconds=random.randint(0, 86400))

def generate_session_id(ip, timestamp):
    """Generate a session ID based on IP and timestamp (grouped by 30-minute window)."""
    return f"{ip}_{timestamp.hour}_{(timestamp.minute // 30) * 30}"

def generate_referrer(event_type):
    """Simulate a referrer based on the event type."""
    referrer_map = {
        "Visit": random.choice(["/search?q=product", "/socialmedia/post", "/home"]),
        "Purchase": random.choice(["/homepage", "/products", "/checkout"]),
        "Inquiry": "/support/contact",
        "Demo Request": "/demo/signup"
    }
    return referrer_map.get(event_type, "")

def generate_entry(customer_id, sale_id=None, ip=None):
    if not ip:
        ip = random.choice([ip for ips in CONTINENT_IPS.values() for ip in ips])
    country = COUNTRIES[ip]
    continent = next(c for c, ips in CONTINENT_IPS.items() if ip in ips)

    event_type = random.choice(EVENT_TYPES)
    ts = random_timestamp()
    sale_date = ts if event_type == "Purchase" else None

    product_name = random.choice(PRODUCTS)
    product_id = PRODUCT_ID_MAP[product_name]
    category = PRODUCT_CATEGORY_MAP[product_name]

    if event_type == "Purchase":
        quantity = random.randint(1, 5)
        unit_price = random.choice(PRICES)
        total_price = round(quantity * unit_price, 2)
        payment_method = random.choice(PAYMENTS)
    else:
        quantity = 0
        unit_price = 0.00
        total_price = 0.00
        payment_method = ""

    if event_type == "Visit":
        url_requested = f"/products/page{random.randint(1, 10)}.html"
    elif event_type == "Purchase":
        url_requested = f"/checkout/{product_name.replace(' ', '_').lower()}"
    elif event_type == "Inquiry":
        url_requested = "/support/contact"
    elif event_type == "Demo Request":
        url_requested = "/demo/signup"

    http_methods = {
        "Visit": "GET",
        "Purchase": "POST",
        "Inquiry": "POST",
        "Demo Request": "POST"
    }
    http_method = http_methods.get(event_type, "GET")

    session_id = generate_session_id(ip, ts)
    referrer = generate_referrer(event_type)

    # Salesperson and sales channel logic
    salesperson_id = random.choice(list(SALESPEOPLE.keys()))
    salesperson = SALESPEOPLE[salesperson_id]

    # Determine sales channel based on salesperson and event type
    if salesperson == "AI Assistant":
        sales_channel = "AI-Driven"
    else:
        sales_channel = random.choice(["Online", "In-Person"]) if event_type in ["Purchase", "Inquiry", "Demo Request"] else "Online"

    # AI interaction logic: True if AI Assistant is salesperson or randomly for Inquiry/Demo Request
    ai_interaction = salesperson == "AI Assistant" or (
        event_type in ["Inquiry", "Demo Request"] and random.random() < 0.3
    )

    return {
        "sale_id": f"S{sale_id}" if event_type == "Purchase" else "",
        "sale_date": sale_date,
        "product_id": product_id,
        "product_name": product_name,
        "category": category,
        "quantity": quantity,
        "unit_price": unit_price,
        "total_price": total_price,
        "payment_method": payment_method,
        "customer_type": random.choice(CUSTOMER_TYPES),
        "customer_id": customer_id,
        "occupation": random.choice(OCCUPATIONS),
        "total_spent": random.randint(200, 5000),
        "purchase_frequency": random.randint(1, 15),
        "customer_age": random.randint(18, 65),
        "customer_gender": random.choice(["Male", "Female"]),
        "timestamp": ts,
        "url_requested": url_requested,
        "http_method": http_method,
        "event_type": event_type,
        "status_code": random.choice(STATUSES),
        "response_time_ms": random.randint(50, 500),
        "country": country,
        "continent": continent,
        "ip_address": ip,
        "session_id": session_id,
        "referrer": referrer,
        "sales_channel": sales_channel,
        "salesperson": salesperson,
        "salesperson_id": salesperson_id,
        "ai_interaction": ai_interaction
    }

def generate_test_data():
    if os.path.exists(CSV_PATH):
        os.remove(CSV_PATH)

    data = []
    sale_id = 100000
    customer_ids = [f"C{1000 + i}" for i in range(5000)]  # Pool of 5,000 customers

    # Ensure 20 entries per continent
    for continent, ips in CONTINENT_IPS.items():
        for _ in range(20):
            ip = random.choice(ips)
            customer_id = random.choice(customer_ids)
            entry = generate_entry(customer_id, sale_id, ip)
            if entry["event_type"] == "Purchase":
                sale_id += 1
            data.append(entry)

    pd.DataFrame(data).to_csv(CSV_PATH, index=False)
    data = []

    # Generate remaining entries
    remaining = TOTAL_ENTRIES - (20 * len(CONTINENT_IPS))
    for _ in range(remaining):
        customer_id = random.choice(customer_ids)
        entry = generate_entry(customer_id, sale_id)
        if entry["event_type"] == "Purchase":
            sale_id += 1
        data.append(entry)

        if len(data) >= 10000:
            pd.DataFrame(data).to_csv(CSV_PATH, mode='a', header=False, index=False)
            data = []

    if data:
        pd.DataFrame(data).to_csv(CSV_PATH, mode='a', header=False, index=False)

    print(f"{TOTAL_ENTRIES} entries saved to {CSV_PATH}")

# Run the generator
generate_test_data()

import pandas as pd

# ... (your existing code for data generation) ...

# Load the generated data into a Pandas DataFrame
data = pd.read_csv("sales_data.csv")

# Now you can call head() on the DataFrame
data.head()

# prompt: code to download dataset into device

from google.colab import files
files.download('sales_data.csv')